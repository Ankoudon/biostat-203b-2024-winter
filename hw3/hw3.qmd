---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 23 @ 11:59PM"
author: "Hiroyasu Ando, UID: 605948443"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
execute:
  eval: true   
---

Display machine information for reproducibility:

```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).

```{r setup, message=FALSE}
library(arrow)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display your machine memory.

```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png) Do a similar visualization for the patient with `subject_id` 10013310 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

**Answer**

Make the Parquet folder `labevents_pq` available at the current working directory `hw3`.

```{bash}
#| eval: false
ln -s ../hw2/labevents.parquet ./labevents_pq
```

Specify the `subject_id`.

```{r}
patient_id = 10013310
```

Retrieve the patient's gender and age.

```{r, message=FALSE}
patients <- read_csv("~/mimic/hosp/patients.csv.gz") |>
  filter(subject_id %in% patient_id)

patient_gender = patients$gender[1]
patient_age = patients$anchor_age[1]
```

Extract the patient race.

```{r, message=FALSE}
patient_race <- read_csv("~/mimic/hosp/admissions.csv.gz") |>
  filter(subject_id %in% patient_id) |>
  select(race) |>
  distinct() |>
  pull() |>
  tolower()
```

Retrieve the patient's top 3 diagnoses. I used 'hadm_id', 21243435.

```{r, message=FALSE}
patient_diagnoses <- read_csv("~/mimic/hosp/diagnoses_icd.csv.gz") |>
  left_join(read_csv("~/mimic/hosp/d_icd_diagnoses.csv.gz"),
            by = c("icd_code", "icd_version")) |>
  filter(subject_id %in% patient_id) |>
  arrange(hadm_id, seq_num) |>
  select(long_title, hadm_id) |>
  slice_head(n = 3)

diagnose_1 <- tolower(patient_diagnoses$long_title[1])
diagnose_2 <- tolower(patient_diagnoses$long_title[2])
diagnose_3 <- tolower(patient_diagnoses$long_title[3])
```

```{r}
patient_diagnoses
```

Make the ADT history data.

```{r, message=FALSE}
transfers <- read_csv("~/mimic/hosp/transfers.csv.gz") |>
  filter(subject_id %in% patient_id) |>
  select(careunit, intime, outtime) |>
  # Fix the timezone issue
  mutate(intime = with_tz(intime, "UTC"),
         outtime = with_tz(outtime, "UTC"))

# Get the number of the distinct careunit
careunit_num <- transfers |>
  select(careunit) |>
  distinct() |>
  nrow()

adt <- transfers |>
  mutate(y_type = "ADT",
         line_size = if_else(
           # Detect if the careunit is ICU or CCU
           str_detect(careunit, "CCU") | str_detect(careunit, "ICU"),
           8, 3)) |>
  # Fix the length of careunit less than 35
  mutate(careunit = str_sub(careunit, 1, 35)) |>
  na.omit() |>
  arrange(intime) 
```

Make the lab events data.

```{r, message=FALSE}
labevents = open_dataset(sources = "./labevents_pq", format = "parquet") |>
  filter(subject_id %in% patient_id) |>
  select(charttime) |>
  as_tibble() |>
  mutate(y_type = "Lab") |>
  # Fix the timezone issue
  mutate(charttime = with_tz(charttime, "UTC")) |>
  arrange(charttime)
```

Make the procedures data.

```{r, message=FALSE}
procedures <- read_csv("~/mimic/hosp/procedures_icd.csv.gz") |>
  filter(subject_id %in% patient_id) |>
  left_join(read_csv("~/mimic/hosp/d_icd_procedures.csv.gz"),
            by = c("icd_code", "icd_version")) |>
  mutate(y_type = "Procedure",
         # Fix the timezone issue
         chartdate = with_tz(chartdate, "UTC")) |>
  # Fix the date format
  mutate(chartdate = as.POSIXct(chartdate, format = "%Y-%m-%d %H:%M:%S")) |>
  # Fix the length of long_title less than 25
  mutate(long_title = str_sub(long_title, 1, 25))

# Get the number of the distinctive procedures
long_title_num <- procedures |>
  select(long_title) |>
  distinct() |>
  nrow()
```

Make the plot.

```{r}
ggplot() +
  geom_point(data = labevents, aes(x = charttime, y = y_type),
             shape = 3, color = "black", size = 2) +
  geom_segment(data = adt,
               aes(x = intime, xend = outtime, y = y_type, yend = y_type,
                   color = careunit), linewidth = adt$line_size) +
  geom_point(data = procedures, aes(x = chartdate,
                                    y = y_type,
                                    shape = long_title), size = 3) +
  scale_shape_manual(values = seq(1, long_title_num)) +
  theme_bw() + 
  theme(legend.position = "bottom", legend.box = "vertical",
        axis.title.y = element_blank()) +
  guides(linewidth = "none",
         color = guide_legend(order = 2, title = "Care Unit"),
         shape = guide_legend(order = 1, title = "Procedure"))+
  labs(title = paste0("Patient ",
                      patient_id, ", ",
                      patient_gender, ", ",
                      patient_age, " ",
                      "years old, ", patient_race),
       x = "Calendar Time",
       subtitle = paste0(diagnose_1, "\n", diagnose_2, "\n", diagnose_3)) +
  scale_y_discrete(limits = c("Procedure", "Lab", "ADT"))
      
```

### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

**Answer**

make the Parquet folder `chartevents_pq` available at the current working directory `hw3`.

```{bash}
#| eval: false
ln -s ../hw2/chartevents.parquet ./chartevents_pq
```

Specify the `subject_id`.

```{r}
patient_id = 10013310
```

Retrieve the ICU stays of the patient.

```{r, message=FALSE}
icustays <- read_csv("~/mimic/icu/icustays.csv.gz") |>
  filter(subject_id %in% patient_id) |>
  select(hadm_id, stay_id) |>
  distinct()
```

Find the itemid of the vitals.

```{r, message=FALSE}
transfers <- read_csv("~/mimic/icu/d_items.csv.gz") |>
  filter(abbreviation == "NBPd" | abbreviation == "NBPs" |
           abbreviation == "HR" | abbreviation == "Temperature F" |
           abbreviation == "RR") |>
  select(itemid, abbreviation) |>
  print(width = Inf)
```
Make the labevents data with all necessary information.

```{r, message=FALSE}
labevents = open_dataset(sources = "./chartevents_pq",
                         format = "parquet") |>
  select(subject_id, itemid, charttime, value, storetime, hadm_id, valuenum) |>
  filter(subject_id %in% patient_id) |>
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) |>
  collect() |>
  left_join(icustays, by = c("hadm_id" = "hadm_id")) |>
  left_join(transfers, by = c("itemid" = "itemid")) |>
  # Fix the timezone issue
  mutate(charttime = with_tz(charttime, "UTC")) |>
  arrange(stay_id, charttime)
```

Make the plot.

```{r}
ggplot() +
  geom_line(data = labevents, mapping = aes(x = charttime, y = valuenum,
                                            color = as.factor(abbreviation))) +
  geom_point(data = labevents, mapping = aes(x = charttime,
                                             y = valuenum,
                                             color = as.factor(abbreviation)),
             size = 1) +
  facet_grid(abbreviation ~ stay_id, scales = "free") +
  theme_light() +
  guides(color = "none",
         x = guide_axis(n.dodge = 2)) +
  theme(axis.title.y = element_blank(), axis.title.x = element_blank()) +
  scale_x_datetime(labels = scales::date_format("%b %d %H:%M")) + 
  labs(title = paste0("Patient ", patient_id, " ICU stays - Vitals"))
```

Do a similar visualization for the patient `10013310`.

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are

```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

**Answer**

Import `icustays.csv.gz` as a tibble `icustays_tble`.

```{r, message=FALSE}
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz") |>
  as_tibble()
```

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs.

**How many unique `subject_id`?**

There are 50920 unique `subject_id`.

```{r}
icustays_tble |>
  distinct(subject_id) |>
  nrow()
```

**Can a `subject_id` have multiple ICU stays?**

The numbers of unique `subject_id` and `stay_id` are different, which means a `subject_id` can have multiple ICU stays.

```{r}
icustays_tble |>
  distinct(stay_id) |>
  nrow()
```

**Summarize the number of ICU stays per `subject_id` by graphs.**

```{r}
icustays_tble |>
  group_by(subject_id) |>
  summarize(n = n()) |>
  ggplot(aes(x = n)) +
  geom_bar() +
  labs(title = "Number of ICU stays per patient",
       x = "Number of ICU stays",
       y = "Number of patients")
```

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.

**Answer**

```{r, message=FALSE}
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz") |>
  as_tibble()
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

-   number of admissions per patient\
-   admission hour (anything unusual?)\
-   admission minute (anything unusual?)\
-   length of hospital stay (from admission to discharge) (anything unusual?)

**Number of admissions per patient**

As the number of admissions per patient increases, the number of patients decreases. 

```{r}
admissions_tble |>
  group_by(subject_id) |>
  summarize(n = n()) |>
  ggplot(aes(x = n)) +
  geom_bar() +
  labs(title = "Number of admissions per patient",
       x = "Number of admissions",
       y = "Number of patients")
```

**Admission hour (anything unusual?)**

The number of admissions is highest at 00:00 and decreases until 06:00. However, it increases sharply again at 07:00, and then declines at 08:00. Thereafter, it gradually increases until 12:00.

```{r, message=FALSE}
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz") |>
  as_tibble()
```

```{r}

admissions_tble_hour <- admissions_tble |>
  mutate(admittime = with_tz(admittime, "UTC")) |>
  mutate(admithour = format(admittime, "%H"))

admissions_tble_hour |>
  ggplot(aes(x = admithour)) +
  geom_bar() +
  labs(title = "Admission hour",
       x = "Admission Hour",
       y = "Admission Count")
```

**Admission minute (anything unusual?)**

There is a peak at 00 minute, and then peak happens every 15 minutes. These peaks are getting smaller as the minute increases.

```{r}
admissions_tble_min <- admissions_tble |>
  mutate(admitminute = format(admittime, "%M"))
  

admissions_tble_min |>
  ggplot(aes(x = admitminute)) +
  geom_bar() +
  labs(title = "Admission minute",
       x = "Admission minute",
       y = "Admission Count") +
  scale_x_discrete(breaks=seq(0, 60, by = 5))
```

**length of hospital stay (from admission to discharge) (anything unusual?)**

As the length of hospital stay increases, the number of events decreases. The most common length of hospital stay is a few days.

```{r}
admissions_tble_los <- admissions_tble |>
  mutate(hos_stay = as.numeric(difftime(dischtime, admittime, units = "days")))
  
admissions_tble_los |>
  ggplot(aes(x = hos_stay)) +
  geom_bar() +
  labs(title = "Length of hospital stay (days)",
       x = "Length of hospital stay (days)",
       y = "Count") 
```

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting),

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300.

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.

**Answer**

```{r, message=FALSE}
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz") |>
  as_tibble()
```

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.

**Answer**

Men and women have similar patterns. The number of patients in their early 20s, both male and female, is high. Also, the number of female patients is higher than that of male patients in all generations.

```{r}
patients_tble |>
  ggplot(aes(x = anchor_age, color = gender)) +
  geom_bar() +
  labs(title = "Age distribution by gender",
       x = "Age",
       y = "Count")
```

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements.

```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)
Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

**Retrieve a subset of `labevents.csv.gz`**

```{r, message=FALSE}
# Get the list of the patients in icustays_tble
patients_id_list <- icustays_tble |>
  select(subject_id) |>
  distinct() |>
  pull()

# Get the list of the required items in d_labitems.csv.gz
items_id_list <- read_csv("~/mimic/hosp/d_labitems.csv.gz") |>
  filter(itemid %in% c(50912,
                       50971,
                       50983,
                       50902,
                       50882, 
                       51221,
                       51301,
                       50931))
```

```{r}
# Get a subset of `labevents.csv.gz`
labevents_sub <- open_dataset(sources = "./labevents_pq", format = "parquet") |>
  select(subject_id, itemid, charttime, valuenum, storetime) |>
  filter(itemid %in% items_id_list$itemid) |>
  filter(subject_id %in% patients_id_list) |>
  collect() |>
  distinct()

labevents_sub
```

**The final `labevents_tble`**

Restrict to the last available measurement (by `storetime`) before the ICU stay. 

```{r, message=FALSE, warning = FALSE}
labevents_sub2 = labevents_sub |>
  left_join(icustays_tble, by = "subject_id") |>
  select(subject_id, itemid, valuenum, storetime, stay_id, intime, charttime) |>
  filter(storetime < intime) |>
  group_by(subject_id, stay_id, itemid) |>
  # Get the latest storetime
  slice_max(order_by = storetime) |>
  # Get the latest charttime
  slice_max(order_by = charttime) |>
  # Get the maxmum value of valuenum
  slice_max(order_by = valuenum) |>
  select(subject_id, itemid, valuenum, stay_id)
```

Make the final data.

```{r, message=FALSE}
labevents_tble = labevents_sub2 |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  arrange(subject_id, stay_id) |>
  ungroup() |>
  rename(setNames(as.character(items_id_list$itemid),
                  tolower(items_id_list$label))) |>
  # Change the column name, "white blood cells" to "wbc" manually
  rename("wbc" = "white blood cells") |>
  print(width = Inf)
```

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement.

![](chartevents_tble.png)
Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

**Retrieve a subset of `chartevents.csv.gz`**

```{r, message=FALSE}
# Get the list of the patients in icustays_tble
patients_id_list <- icustays_tble |>
  select(subject_id) |>
  distinct() |>
  pull()

# Get the list of the required items in d_items.csv.gz
items_id_list <- read_csv("~/mimic/icu/d_items.csv.gz") |>
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210))
```

```{r}
# Get a subset of `chartevents.csv.gz`
chartevents_sub <- open_dataset(sources = "./chartevents_pq",
                                format = "parquet") |>
  select(subject_id, itemid, charttime, valuenum) |>
  filter(itemid %in% items_id_list$itemid) |>
  filter(subject_id %in% patients_id_list) |>
  collect() |>
  distinct()

chartevents_sub
```

**The final `chartevents_tble`**

Restrict to the first vital measurement within the ICU stay.

```{r, message=FALSE, warning = FALSE}
chartevents_sub_2 = chartevents_sub |>
  left_join(icustays_tble, by = "subject_id") |>
  select(subject_id,
         itemid,
         valuenum,
         stay_id,
         intime,
         charttime,
         outtime) |>
  filter(charttime >= intime) |>
  filter(charttime <= outtime) |>
  group_by(subject_id, stay_id, itemid) |>
  slice_min(order_by = charttime) |>
  select(subject_id, itemid, valuenum, stay_id)
```

Make the final data.

```{r}
chartevents_tble = chartevents_sub_2 |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  arrange(subject_id, stay_id) |>
  ungroup() |>
  rename(setNames(as.character(items_id_list$itemid),
                  gsub(" ", "_", tolower(items_id_list$label)))) |>
  print(width = Inf)
```

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` \>= 18) and columns contain at least following variables

-   all variables in `icustays_tble`\
-   all variables in `admissions_tble`\
-   all variables in `patients_tble`
-   the last lab measurements before the ICU stay in `labevents_tble`
-   the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)
**Answer**

```{r}
mimic_icu_cohort = icustays_tble |>
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) |>
  left_join(patients_tble, by = "subject_id") |>
  left_join(labevents_tble, by = c("subject_id", "stay_id")) |>
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) |>
  filter(anchor_age >= 18) |>
  mutate(age_at_intime = anchor_age + 
           as.numeric(format(intime, "%Y")) - anchor_year) |>
  #mutate(age_at_intime = anchor_age + round(
    #as.numeric(difftime(intime, admittime))/(365 * 24 * 60 * 60))) |>
  print(width = Inf)
```
## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

-   Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

**los vs race**

This is the basic statistics of the length of ICU stay by race.

```{r}
race_los <- mimic_icu_cohort |>
  group_by(race) |>
  summarise(
    n = n(),
    mean_los = mean(los),
    median_los = median(los),
    max_los = max(los),
    min_los = min(los),
    sd_los = sd(los),
    iqr_los = IQR(los))

race_los
```

As for the graph, "race" are categorized into "ASIAN", "WHITE", "BLACK", "HISPANIC", and "OTHER". This is the box plot of the length ICU by the category. 

```{r}
race_los <- mimic_icu_cohort |>
  mutate(race_type = if_else(
    str_detect(race, "ASIAN"), "ASIAN", if_else(
      str_detect(race, "WHITE"), "WHITE", if_else(
        str_detect(race, "BLACK"), "BLACK", if_else(
          str_detect(race, "HISPANIC"), "HISPANIC", "OTHER"))))) 

gg_race_los <- race_los |>
  ggplot(aes(x = race_type, y = los)) +
  geom_boxplot() +
  labs(title = "Length of ICU stay by race",
       x = "race",
       y = "Length of ICU stay")

gg_race_los
```
Without the outlier, the box plot is as follows.

```{r}
gg_race_los <- race_los |>
  ggplot(aes(x = race_type, y = los)) +
  geom_boxplot(outlier.shape = NA) +
  labs(title = "Length of ICU stay by race",
       x = "race",
       y = "Length of ICU stay") + 
  coord_cartesian(ylim = c(0, 10))

gg_race_los
```

**los vs insurance**

This is the basic statistics of the length of ICU stay by insurance.

```{r}
insurance_los <- mimic_icu_cohort |>
  group_by(insurance) |>
  summarise(
    n = n(),
    mean_los = mean(los),
    median_los = median(los),
    max_los = max(los),
    min_los = min(los),
    sd_los = sd(los),
    iqr_los = IQR(los))

insurance_los
```

This is the box plot of the length of ICU by insurance.

```{r}
insurance_los <- mimic_icu_cohort |>
  ggplot(aes(x = insurance, y = los)) +
  geom_boxplot() +
  labs(title = "Length of ICU stay by insurance",
       x = "Insurance",
       y = "Length of ICU stay")

insurance_los
```
Without the outlier, the box plot is as follows.

```{r}
insurance_los <- mimic_icu_cohort |>
  ggplot(aes(x = insurance, y = los)) +
  geom_boxplot(outlier.shape = NA) +
  labs(title = "Length of ICU stay by insurance",
       x = "Insurance",
       y = "Length of ICU stay") +
  coord_cartesian(ylim = c(0, 9))

insurance_los
```

**los vs marital status**

This is the basic statistics of the length of ICU stay by marital status. I put "OTHERS" for the missing values.

```{r}
marital_status_los <- mimic_icu_cohort |>
  mutate(marital_status = ifelse(is.na(marital_status),
                                 "OTHERS", marital_status)) |>
  group_by(marital_status) |>
  summarise(
    n = n(),
    mean_los = mean(los),
    median_los = median(los),
    max_los = max(los),
    min_los = min(los),
    sd_los = sd(los),
    iqr_los = IQR(los))

marital_status_los
```
This is the box plot of the length of ICU stay by marital status. I put "OTHERS" for the missing values.

```{r}
marital_status_los <- mimic_icu_cohort |>
  mutate(marital_status = ifelse(is.na(marital_status),
                                 "OTHERS", marital_status)) |>
  ggplot(aes(x = marital_status, y = los)) +
  geom_boxplot() +
  labs(title = "Length of ICU stay by marital status",
       x = "Marital status",
       y = "Length of ICU stay")

marital_status_los
```

Without the outlier, the box plot is as follows. I put "OTHERS" for the missing values.

```{r}
marital_status_los <- mimic_icu_cohort |>
  mutate(marital_status = ifelse(is.na(marital_status),
                                 "OTHERS", marital_status)) |>
  ggplot(aes(x = marital_status, y = los)) +
  geom_boxplot(outlier.shape = NA) +
  labs(title = "Length of ICU stay by marital status",
       x = "Marital status",
       y = "Length of ICU stay") +
  coord_cartesian(ylim = c(0, 12))

marital_status_los
```


**los vs gender**

This is the basic statistics of the length of ICU stay by gender. 

```{r}
gender_los <- mimic_icu_cohort |>
  group_by(gender) |>
  summarise(
    n = n(),
    mean_los = mean(los),
    median_los = median(los),
    max_los = max(los),
    min_los = min(los),
    sd_los = sd(los),
    iqr_los = IQR(los))

gender_los
```

This is the box plot of the length of ICU stay by gender.

```{r}
gender_los <- mimic_icu_cohort |>
  ggplot(aes(x = gender, y = los)) +
  geom_boxplot() +
  labs(title = "Length of ICU stay by gender",
       x = "gender",
       y = "Length of ICU stay") 

gender_los
```

Without the outlier, the box plot is as follows.

```{r}
gender_los <- mimic_icu_cohort |>
  ggplot(aes(x = gender, y = los)) +
  geom_boxplot(outlier.shape = NA) +
  labs(title = "Length of ICU stay by gender",
       x = "gender",
       y = "Length of ICU stay") +
  coord_cartesian(ylim = c(0, 8))

gender_los
```

**los vs age at intime**

This is the basic statistics of the length of ICU stay by age at intime.

```{r}
age_at_intime_los <- mimic_icu_cohort |>
  group_by(age_at_intime) |>
  summarise(
    n = n(),
    mean_los = mean(los),
    median_los = median(los),
    max_los = max(los),
    min_los = min(los),
    sd_los = sd(los),
    iqr_los = IQR(los))

age_at_intime_los
```

This is the scatter plot of the length of ICU stay by age at intime.

```{r}
age_at_intime_los <- mimic_icu_cohort |>
  ggplot(aes(x = age_at_intime, y = los)) +
  geom_point() +
  labs(title = "Length of ICU stay vs age at intime",
       x = "Age at intime",
       y = "Length of ICU stay")

age_at_intime_los
```

-   Length of ICU stay `los` vs the last available lab measurements before ICU stay

**Answer**

This is the scatter plot of the length of ICU stay by the last available lab measurements before ICU stay.

```{r, warning=FALSE}
lab_los <- mimic_icu_cohort |>
  select(los, creatinine, potassium, sodium, chloride, bicarbonate, hematocrit, wbc, glucose) |>
  pivot_longer(cols = -los, names_to = "lab", values_to = "value") |>
  ggplot(aes(x = value, y = los)) +
  geom_point() +
  facet_wrap(~lab, scales = "free") +
  labs(title = "Length of ICU stay vs the last available lab measurements before ICU stay",
       x = "Lab value",
       y = "Length of ICU stay")

lab_los
```

-   Length of ICU stay `los` vs the first vital measurement within the ICU stay.

**Answer**

This is the scatter plot of the length of ICU stay by the first vital measurement within the ICU stay.

```{r, warning=FALSE}
vital_los <- mimic_icu_cohort |>
  select(los, heart_rate, non_invasive_blood_pressure_systolic,
         non_invasive_blood_pressure_diastolic, temperature_fahrenheit,
         respiratory_rate) |>
  pivot_longer(cols = -los, names_to = "vital", values_to = "value") |>
  ggplot(aes(x = value, y = los)) +
  geom_point() +
  facet_wrap(~vital, scales = "free") +
  labs(title = "Length of ICU stay vs First vital measurement within
       the ICU stay.",
       x = "Vital value",
       y = "Length of ICU stay")

vital_los
```

-   Length of ICU stay `los` vs first ICU unit

**Answer**

This is the basic statistics of the length of ICU stay by first ICU unit.

```{r}
unit_los <- mimic_icu_cohort |>
  group_by(first_careunit) |>
  summarise(
    n = n(),
    mean_los = mean(los),
    median_los = median(los),
    max_los = max(los),
    min_los = min(los),
    sd_los = sd(los),
    iqr_los = IQR(los))

unit_los
```

This is the box plot of the length of ICU stay by first ICU unit.

```{r}
unit_los <- mimic_icu_cohort |>
  ggplot(aes(x = los, y = first_careunit)) +
  geom_boxplot() +
  labs(title = "Length of ICU stay vs first ICU unit",
       x = "Length of ICU stay",
       y = "First ICU unit")

unit_los
```
Without the outlier, the box plot is as follows.

```{r}
unit_los <- mimic_icu_cohort |>
  ggplot(aes(x = los, y = first_careunit)) +
  geom_boxplot(outlier.shape = NA) +
  labs(title = "Length of ICU stay vs first ICU unit",
       x = "Length of ICU stay",
       y = "First ICU unit") +
  coord_cartesian(xlim = c(0, 18))

unit_los
```

```{r}